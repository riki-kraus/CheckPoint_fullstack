import { Get } from 'type-fest';
type NestedKey<T> = T extends Record<string, unknown> ? {
    [K in keyof T]: K extends string ? `${K}` | `${K}.${NestedKey<T[K]>}` : never;
}[keyof T] : never;
export declare const throwOrReturn: <T>(error: unknown, throwError: boolean, defaultValue: T) => T;
export declare const get: <TObject extends Record<string, unknown>, TPath extends NestedKey<TObject>>(object: TObject | undefined, path: TPath) => Get<TObject, TPath> | undefined;
export declare const validNumberParam: (value: unknown) => boolean;
export {};
