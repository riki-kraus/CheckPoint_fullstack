import { FieldValues, UseFormProps as UseFormPropsRhf, UseFormReturn as UseFormReturnRhf } from 'react-hook-form';
import { AnyObject, ObjectSchema } from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';
export type UseFormProps<TFieldValues extends FieldValues = FieldValues, TContext extends AnyObject = AnyObject> = Omit<UseFormPropsRhf<TFieldValues, TContext>, 'resolver'> & {
    schema: ObjectSchema<TFieldValues, TContext>;
    schemaOptions?: Parameters<typeof yupResolver<TFieldValues>>[1];
    resolverOptions?: Parameters<typeof yupResolver<TFieldValues>>[2];
};
export type UseFormReturn<TFieldValues extends FieldValues = FieldValues, TContext extends AnyObject = AnyObject, TTransformedValues extends FieldValues | undefined = undefined> = UseFormReturnRhf<TFieldValues, TContext, TTransformedValues> & {
    schema: ObjectSchema<TFieldValues, TContext>;
};
export declare const useForm: <TFieldValues extends FieldValues = FieldValues, TContext extends AnyObject = AnyObject, TTransformedValues extends FieldValues | undefined = undefined>({ schema, schemaOptions, resolverOptions, ...props }: UseFormProps<TFieldValues, TContext>) => UseFormReturn<TFieldValues, TContext, TTransformedValues>;
