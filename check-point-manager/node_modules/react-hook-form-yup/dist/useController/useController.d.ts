import { UseControllerProps as UseControllerPropsRhf, UseControllerReturn as UseControllerReturnRhf, FieldValues, FieldPath } from 'react-hook-form';
import { SchemaState } from '../types';
import { SchemaStateDynamic } from '../useSchemaController';
export type UseControllerReturn<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>, TSchema extends SchemaState = SchemaStateDynamic<TFieldValues, TName>> = UseControllerReturnRhf<TFieldValues, TName> & {
    schemaState: TSchema;
};
export type UseControllerProps<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>> = UseControllerPropsRhf<TFieldValues, TName>;
export declare const useController: <TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>, TSchema extends SchemaState = SchemaStateDynamic<TFieldValues, TName>>({ name, ...props }: UseControllerProps<TFieldValues, TName>) => UseControllerReturn<TFieldValues, TName, TSchema>;
